{"version":3,"sources":["../node_modules/peerjs/dist sync","components/HomeScreem.js","components/CreateStream.js","components/WatchSream.js","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","HomeScreem","useState","streamId","setstreamId","to","type","name","placeholder","onChange","target","value","CreateStream","setStreamId","stream","setStream","myStream","useRef","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","useEffect","uid","uuid","peer","Peer","host","port","path","video","audio","videoStream","current","srcObject","on","connection","call","data","console","log","startSream","ref","muted","autoPlay","WatchSream","useParams","connect","send","answer","App","className","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yHAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,gHCgBVC,EArBI,WACf,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,OACI,gCACI,4CACA,cAAC,IAAD,CAAMC,GAAG,UAAT,6BACA,gDACA,uBACIC,KAAK,OACLC,KAAK,WACLC,YAAY,kBACZC,SAAU,SAAChB,GACPW,EAAYX,EAAEiB,OAAOC,UAG7B,cAAC,IAAD,CAAMN,GAAE,gBAAWF,GAAnB,8B,uBCwCGS,EAvDM,WACjB,MAAgCV,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBU,EAAjB,KACA,EAA4BX,mBAAS,MAArC,mBAAOY,EAAP,KAAeC,EAAf,KACMC,EAAWC,mBACXC,EACFC,UAAUD,cACVC,UAAUC,oBACVD,UAAUE,gBAuCd,OArCAC,qBAAU,WACN,IAAMC,EAAMC,kBACO,WAEf,IAAMC,EAAO,IAAIC,IAAKH,EAAK,CACvBI,KAAM,IACNC,KAAM,KACNC,KAAM,YAIVX,EACI,CACIY,OAAO,EACPC,OAAO,IAEX,SAACC,GACGhB,EAASiB,QAAQC,UAAYF,EAC7BjB,EAAUiB,MAIlBP,EAAKU,GAAG,QAAQ,SAAUnC,GACtBa,EAAYb,MAGhByB,EAAKU,GAAG,cAAc,SAACC,GACnBX,EAAKY,KAAKD,EAAWX,KAAMX,GAC3BsB,EAAWD,GAAG,QAAQ,SAACG,GACnBC,QAAQC,IAAIF,SAKxBG,KACD,IAGC,gCACI,+CACA,uBAAOC,IAAK1B,EAAU2B,OAAK,EAACC,UAAQ,IACpC,4BAAIzC,QCbD0C,EApCI,WACf,IAAQ1C,EAAa2C,cAAb3C,SACF6B,EAAcf,mBA0BpB,OAxBAK,qBAAU,WACN,IAAMC,EAAMC,iBACNC,EAAO,IAAIC,IAAKH,EAAK,CACvBI,KAAM,IACNC,KAAM,KACNC,KAAM,YAGJO,EAAaX,EAAKsB,QAAQ5C,GAChCiC,EAAWD,GAAG,QAAQ,WAClBC,EAAWY,KAAK,SAChBZ,EAAWD,GAAG,QAAQ,SAACG,GACnBC,QAAQC,IAAIF,SAIpBb,EAAKU,GAAG,QAAQ,SAACE,GACbA,EAAKY,SACLZ,EAAKF,GAAG,UAAU,SAACrB,GACfkB,EAAYC,QAAQC,UAAYpB,UAGzC,IAGC,gCACI,8CACA,uBAAO4B,IAAKV,EAAaW,OAAK,EAACC,UAAQ,QCbpCM,MAlBf,WACI,OACI,cAAC,IAAD,CAAQC,UAAU,MAAlB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOtB,KAAK,IAAIuB,OAAK,EAArB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOvB,KAAK,UAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,mBAAZ,SACI,cAAC,EAAD,YCJLwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c98bca5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 31;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst HomeScreem = () => {\n    const [streamId, setstreamId] = useState(\"\");\n\n    return (\n        <div>\n            <h1>HomeScreen</h1>\n            <Link to=\"/stream\">Create a stream</Link>\n            <h2>Watch a stream</h2>\n            <input\n                type=\"text\"\n                name=\"streamId\"\n                placeholder=\"paste stream id\"\n                onChange={(e) => {\n                    setstreamId(e.target.value);\n                }}\n            />\n            <Link to={`watch/${streamId}`}>Watch Stream</Link>\n        </div>\n    );\n};\n\nexport default HomeScreem;\n","import Peer from \"peerjs\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { uuid } from \"uuidv4\";\n\nconst CreateStream = () => {\n    const [streamId, setStreamId] = useState(\"\");\n    const [stream, setStream] = useState(null);\n    const myStream = useRef();\n    const getUserMedia =\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n\n    useEffect(() => {\n        const uid = uuid();\n        const startSream = () => {\n            // create peer\n            const peer = new Peer(uid, {\n                host: \"/\",\n                port: 8080,\n                path: \"/peerjs\",\n            });\n\n            //create video stream\n            getUserMedia(\n                {\n                    video: true,\n                    audio: true,\n                },\n                (videoStream) => {\n                    myStream.current.srcObject = videoStream; //this would show in the users' browser window\n                    setStream(videoStream); //this would be sent to would be sent to whoever connects\n                }\n            );\n\n            peer.on(\"open\", function (id) {\n                setStreamId(id);\n            });\n\n            peer.on(\"connection\", (connection) => {\n                peer.call(connection.peer, stream); // call whoever connects\n                connection.on(\"data\", (data) => {\n                    console.log(data);\n                });\n            });\n        };\n\n        startSream();\n    }, []);\n\n    return (\n        <div>\n            <h1>Create Stream</h1>\n            <video ref={myStream} muted autoPlay />\n            <p>{streamId}</p>\n        </div>\n    );\n};\n\nexport default CreateStream;\n","import Peer from \"peerjs\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router\";\nimport { uuid } from \"uuidv4\";\n\nconst WatchSream = () => {\n    const { streamId } = useParams();\n    const videoStream = useRef();\n\n    useEffect(() => {\n        const uid = uuid();\n        const peer = new Peer(uid, {\n            host: \"/\",\n            port: 8080,\n            path: \"/peerjs\",\n        });\n\n        const connection = peer.connect(streamId);\n        connection.on(\"open\", () => {\n            connection.send(\"hello\");\n            connection.on(\"data\", (data) => {\n                console.log(data);\n            });\n        });\n\n        peer.on(\"call\", (call) => {\n            call.answer();\n            call.on(\"stream\", (stream) => {\n                videoStream.current.srcObject = stream;\n            });\n        });\n    }, []);\n\n    return (\n        <div>\n            <h1>Watch stream</h1>\n            <video ref={videoStream} muted autoPlay />\n        </div>\n    );\n};\n\nexport default WatchSream;\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomeScreem from \"./components/HomeScreem\";\nimport CreateStream from \"./components/CreateStream\";\nimport WatchSream from \"./components/WatchSream\";\n\nfunction App() {\n    return (\n        <Router className=\"App\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <HomeScreem />\n                </Route>\n                <Route path=\"/stream\">\n                    <CreateStream />\n                </Route>\n                <Route path=\"/watch/:streamId\">\n                    <WatchSream />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}